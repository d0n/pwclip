# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018, Leon Pelzer
# This file is distributed under the same license as the pwclip package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: pwclip 1.3.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-04-25 23:28+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../README.rst:2
msgid "pwclip"
msgstr ""

#: ../../README.rst:5
msgid "What pwclip is"
msgstr ""

#: ../../README.rst:7
msgid "pwclip is a password management tool. It's main target is having fast and comfortable access to passwords by storing them for a variable time in the systems clipboard (copy/paste) buffer."
msgstr ""

#: ../../README.rst:11
msgid "It basically has two operating modes. One is for operating on yubikeys to generate uniq responses which might be used as passwords while they can be generated by that exact yubikey only. The first yubikey found on the system and the first slot, configured with (HMAC-SHA1) challenge-response, will be used. For that function Windows is supported (see \"Install\" section)."
msgstr ""

#: ../../README.rst:17
msgid "The second operating mode does currently only work (as so far tested) on Linux due to lack of cmdline handling of gpg4win (which i am not sure about and will go into as soon as i find the time and motivation for that). It can be used to create a ~/.pwdcrypt file which is gpg encrypted text using either the value of GPGKEYS as gpg recipients if found in environment otherwise every key within the users keyring will be used. For password-list managing there is a simple \"import\" function. On startup it lookes for a ~/.pwd.yaml file and if found merged with the already known passwords from the ~/.passcrypt if there is one. All entrys in ~/.passcrypt will be overridden by the entrys from the ~/.pwd.yaml file. As soon as it has been merged the ~/.pwd.yaml file will be deleted. See \"YAML-Format\" section for details."
msgstr ""

#: ../../README.rst:29
msgid "To catch user input python's Tk (tkinter) library is used to create a simple password input window. The appropriate response is saved for only 3 seconds by default to not have it exposed as soon as it's used. The utility also supports the input of any integer which is then used as timer. Otherwise the environment is searched for PWCLIPTIME and uses the value of that environment variable as timer. The timer is used as time in which the received password stays in the paste buffer bevore its replaced by the previously copied value. As you may see there is an optional commet which is used as text notification displayed on the screen if set. Therefor python3's gi notify2 is used which is another reason for discontinuing python2 support."
msgstr ""

#: ../../README.rst:40
msgid "I highly encourage you to bind pwclip to a shortcut within your X-Environment to have access to your stored passwords from within any program. For example i like binding it to `Super-Middle-Mouse-Button` for the pwclip default mode and `Strg-Shift-Middle-Mouse-Button` for the yubico mode. On Windows-Systems you need to create a link for it somewhere. When editing that link you may set a keyboard shortcut (could not find a nicer solution by now). The target for that link then whould be \"%PYTHONINSTALLDIR%\\\\scripts\\\\pwclip.exe\"."
msgstr ""

#: ../../README.rst:49
msgid "Last but not least i want to point something out: I've been trying my best to keep the passwords secure from unwanted access BUT there is !NO GUARANTEE! that the passwords handled with during runtime are safe from other users access, especially root access on linux systems (help on that is very welcome). Please be aware of that."
msgstr ""

#: ../../README.rst:55
msgid "Since version 1.2 openssl keys are supported. For use with pwclip they will be converted to gpg-keys (gpgsm) automaticly - openssl is not used for en/decryption."
msgstr ""

#: ../../README.rst:61
msgid "YAML-Format"
msgstr ""

#: ../../README.rst:63
msgid "\\-\\-\\-"
msgstr ""

#: ../../README.rst:74
msgid "realsystemuser:"
msgstr ""

#: ../../README.rst:69
msgid "\\- somename:"
msgstr ""

#: ../../README.rst:67
msgid "\\- Som3(rypt!cPass"
msgstr ""

#: ../../README.rst:69
msgid "\\- Some optional info to display as popup notification"
msgstr ""

#: ../../README.rst:74
msgid "\\- othername:"
msgstr ""

#: ../../README.rst:72
msgid "\\- Som3other(rypt!cPass"
msgstr ""

#: ../../README.rst:77
msgid "Installation"
msgstr ""

#: ../../README.rst:79
msgid "On Windows you need to install Python3 from http://python.org/ first. On most Linux distributions python will be part of the system. With Python installed, you can install the pwclip package from the Python-Package-Index (pyPI) by running:"
msgstr ""

#: ../../README.rst:84
msgid "``pip3 install pwclip``"
msgstr ""

#: ../../README.rst:86
msgid "and installing the dependencies (not managed by pip) manually."
msgstr ""

#: ../../README.rst:89
msgid "Installing from a source distribution archive"
msgstr ""

#: ../../README.rst:90
msgid "To install this package from a source distribution archive, do the following:"
msgstr ""

#: ../../README.rst:92
msgid "Extract all the files in the distribution archive to some directory on your system."
msgstr ""

#: ../../README.rst:95
msgid "In that directory, run: ``python setup.py install``"
msgstr ""

#: ../../README.rst:99
msgid "Usage"
msgstr ""

#: ../../README.rst:101
msgid "Although is was planed as GUI-Program it's also possible to be executed from terminals. For Windows, Linux and OSX there is an appropriate executable packed which might be executed like the following examples will show:"
msgstr ""

#: ../../README.rst:106
msgid "GPG-Mode"
msgstr ""

#: ../../README.rst:108
msgid "If there is an environment variable called GPGKEYS it will use those keys to encrypt on changes to the password file. To list the password file you may use the list switch followed by optional search pattern like:"
msgstr ""

#: ../../README.rst:112
msgid "``pwcli -l``"
msgstr ""

#: ../../README.rst:114
msgid "or"
msgstr ""

#: ../../README.rst:116
msgid "``pwcli -l $PATTERN``"
msgstr ""

#: ../../README.rst:118
msgid "as you can see the yaml format tends to be used for multiple user names to better manage large lists. By default the current users entrys will be listed only. To have them all listed (or searched for by the above pattern example) use:"
msgstr ""

#: ../../README.rst:123
msgid "``pwcli -A -l $PATTERN``"
msgstr ""

#: ../../README.rst:126
msgid "Yubikey-Mode"
msgstr ""

#: ../../README.rst:127
#: ../../README.rst:154
msgid "``ykclip``"
msgstr ""

#: ../../README.rst:129
msgid "The YKSERIAL environment variable is used if found to select the yubikey to use if more than one key is connected. Otherwise the first one found is chosen. Likewise it also accepts an option:"
msgstr ""

#: ../../README.rst:133
msgid "``pwcli -y $YKSERIAL``"
msgstr ""

#: ../../README.rst:135
msgid "To have it wait for a specific time like 60 seconds (bevore resetting the paste buffer to the previously copied value) the PWCLIPTIME environment variable is used or also the command accepts it as input:"
msgstr ""

#: ../../README.rst:139
msgid "``pwcli -t 60 -l mysavedusername``"
msgstr ""

#: ../../README.rst:141
msgid "Most of the options may be combined. For more information on possible options in cli mode please see:"
msgstr ""

#: ../../README.rst:144
msgid "``pwcli --help``"
msgstr ""

#: ../../README.rst:147
msgid "GUI-Mode"
msgstr ""

#: ../../README.rst:149
msgid "For the GUI-Mode just use one of the following commands, not accepting any options or arguments:"
msgstr ""

#: ../../README.rst:152
msgid "``pwclip``"
msgstr ""

#: ../../README.rst:158
msgid "Troubleshooting"
msgstr ""

#: ../../README.rst:160
msgid "When using the yubikey challenge-response mode there is a bug in the usb_hid interface. This is because of python2 => 3 transition, most likely and can be fixed easily (having root privileges) by executing the following commands: ``sudo su -`` # only needed if current user isn't root already ``sudo vi +':107s/\\(.* =\\).*/\\1 response[0]/' +':wq' /usr/local/lib/python3.5/dist-packages/yubico/yubikey_4_usb_hid.py`` Explained: In line 107 of the file /usr/local/lib/python3.5/dist-packages/yubico/yubikey_4_usb_hid.py the ord() coversion of the response `r_len = ord(response[0])` needs to be replaced by: `r_len = response[0]`"
msgstr ""

#: ../../README.rst:175
msgid "Credits"
msgstr ""

#: ../../README.rst:177
msgid "Python3 developers & the whole community (farmost those @stackoverflow.com)"
msgstr ""

#: ../../README.rst:178
msgid "Pyperclip for they excellent Windows & OSX clipboard code"
msgstr ""

#: ../../README.rst:179
msgid "Yubico (cheap & solid HW-Security-Modules) & python-yubico developers"
msgstr ""

#: ../../README.rst:180
msgid "GNU Privacy Guard (basic kryptography) & python-gnupg developers"
msgstr ""

#: ../../README.rst:181
msgid "SonicLux for telling me that a final version must not be 0.3.3 :D"
msgstr ""

#: ../../README.rst:183
msgid "I hope that this might be somewhat of help or at least be inspiring for own ideas. You're alway welcome to leave me a message for requests, reviews or feature requests as well as bug reports: <mail@leonpelzer.de>"
msgstr ""

#: ../../README.rst:187
msgid "{ChangeLog}"
msgstr ""

