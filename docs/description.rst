Description
===========

pwclip is a password management tool. It's main target is having fast and
comfortable access to passwords by storing them for a variable time in the
systems clipboard (copy/paste buffer). It uses either GnuPG2 or OpenSSL
(converted to GPGSM) keys for cryptographic operations. It also works with
yubikey's challenge-response to generate uniq HMAC-SHA1 hashes as well.

The main feature is the pwcli/pwclip mode which provides easy access to the
~/.passcrypt file. That file is used by default as password storage. The
program is executed in gui mode when pwclip is called and in cli mode when
pwcli is called respectivly. It creates the ~/.passcrypt file which is gpg
encrypted text using either the value of GPGKEYS from the users environment as
gpg encryption recipients. On startup it lookes for a ~/.pwd.yaml file which is
merged with the already known passwords from the ~/.passcrypt file if there
already is one. All entrys in the ~/.passcrypt file will be overridden by
entrys from the ~/.pwd.yaml file.

The second operating mode is for operating on yubikeys to generate uniq
responses which might be used as passwords while they can be generated by that
exact yubikey only. The first yubikey found on the system and the first slot,
configured with (HMAC-SHA1) challenge-response, will be used. For that function
Windows is supported (see "Install" section).

To catch user input python's Tk (tkinter) library is used to create a simple
password input window. The appropriate response is saved for only 3 seconds
by default to not have it exposed as soon as it's used. The utility also
supports the input of any integer which is then used as timer. Otherwise the
environment is searched for PWCLIPTIME and uses the value of that environment
variable as timer. The timer is used as time in which the received password
stays in the paste buffer bevore its replaced by the previously copied value.
As you may see there is an optional commet which is used as text notification
displayed on the screen if set. Therefor python3's gi notify2 is used which is
another reason for discontinuing python2 support.

I would encourage you to bind pwclip to a shortcut within your X-Environment
to have access to your passwords at any time. On Windows-Systems you need to
create a link for it somewhere. When editing that link you may set a keyboard
shortcut (could not find a nicer solution by now). The target for that link
then whould be "%PYTHONINSTALLDIR%\\scripts\\pwclip.exe".

I've been trying my best to keep the passwords from unwanted access BUT i do
!NOT GUARANTEE! that the passwords handled during runtime are safe from other
users access (especially "root" on linux systems - help on that is very
welcome) - please be aware of that!

Since version 1.2 openssl keys are supported. For the use with pwclip they will
be converted to gpg-keys automaticly and gpgsm is used instead of gpg - openssl
is not used for en/decryption to be precisely.

The ~/.pwd.yaml as well as the ~/.passcrypt file is assembled as a list of one
or more users which should be named like the username used for current system
login. You may have more than one users passwords in the passcrypt but any user
who can store passwords also can password stored for other usernames in that
file. It is just of practical use if you have stored passwords for different
system usernames sharing the same passcrypt file.
As an example: A person called "Andrew" has a username called "bob". On some
other machine he has a username called "cat" and uses SSH for both of them.
Now sharing the same passcrypt that file would be assembled like the attached
YAML-Format. If so he can omit prividing -u or -A when beeing logged in as
"bob" or "cat" respectivly. While its only the encrypted yaml written to file
you can be read it using "gpg -d" as well at any time if the correct key is
present.

YAML-Format
-----------

\-\-\-

bob:
    \- ssh:
        \- $om3(rypt!cPass

        \- remember to cleanup on logout

    \- othertool:
        \- 0th3r(rypt!cPass

cat:
    \- ssh:
        \- $om30ther(rypticPass

